root ${NGINX_ROOT};
client_max_body_size ${NGINX_MAX_BODY_SIZE};
gzip_static on;

location = /favicon.ico {
  log_not_found off;
  access_log off;
}

location = /robots.txt {
  root /var/www;
  allow all;
  log_not_found off;
  access_log off;
}

# ckan upstream target, re-evaluates DNS properly
set $ckan_target "${CKAN_HOST}:${CKAN_PORT}";

# ckan at /
location ~ ^/(.*)$ {
  proxy_pass http://$ckan_target/$1$is_args$args;

  # common security headers
  include /etc/nginx/conf.d/security_headers.conf;
  # always enforce same origin policy
  add_header X-Frame-Options SAMEORIGIN;
  # content type options https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
  add_header X-Content-Type-Options "nosniff" always;

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Url-Scheme $scheme;
  proxy_cache cache;
  proxy_cache_bypass $no_cache;
  proxy_no_cache $no_cache;
  proxy_cache_valid 30m;
  proxy_cache_key $host$scheme$proxy_host$request_uri;
  proxy_intercept_errors on;
  proxy_read_timeout 120s;

  location ~ ^/en($|/.*) {
    return 301 /en_GB$1;
  }

  location ~ ^/user/_logout {
    proxy_pass http://$ckan_target/user/_logout;
    proxy_hide_header Cache-Control;
    add_header Cache-Control private;
  }

  location ~ ^/paha/(.*)$ {
    proxy_pass http://$ckan_target/paha/$1$is_args$args;
    set_real_ip_from  ${NGINX_PROXY_ADDRESS};
    real_ip_header    X-Forwarded-For;
    real_ip_recursive on;
    # Process auth source address list into allow directives
    {% for ip in auth_source_addresses.split(',') %}
    allow {{ ip|trim }};
    {% endfor %}
    deny all;
  }

  location ~ /(fi|en_GB|sv)/organization/(.*)/embed {
    proxy_pass http://$ckan_target/$1/organization/$2/embed$is_args$args;

    add_header Bypass-Sameorigin-Policy 1;
  }

  location ~ /(fi/|en_GB/|sv/)?(api/)(.*) {
    proxy_pass http://$ckan_target/$1$2$3$is_args$args;

    proxy_no_cache 1;
    proxy_cache_bypass 1;
    proxy_intercept_errors off;
  }
}


