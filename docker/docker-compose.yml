version: "3.8"

x-env-ckan: &env-ckan
  CKAN_IMAGE_TAG: ${CKAN_IMAGE_TAG}
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PORT: ${REDIS_PORT}
  REDIS_DB: ${REDIS_DB}
  SOLR_HOST: ${SOLR_HOST}
  SOLR_PORT: ${SOLR_PORT}
  SOLR_PATH: ${SOLR_PATH}
  NGINX_HOST: ${NGINX_HOST}
  DB_CKAN_HOST: ${DB_CKAN_HOST}
  DB_CKAN: ${DB_CKAN}
  DB_CKAN_USER: ${DB_CKAN_USER}
  DB_CKAN_PASS: ${DB_CKAN_PASS}
  DOMAIN_NAME: ${DOMAIN_NAME}
  SECONDARY_DOMAIN_NAME: ${SECONDARY_DOMAIN_NAME}
  SITE_PROTOCOL: ${SITE_PROTOCOL}
  SMTP_HOST: ${SMTP_HOST}
  SMTP_USERNAME: ${SMTP_USERNAME}
  SMTP_PASS: ${SMTP_PASS}
  SMTP_PROTOCOL: ${SMTP_PROTOCOL}
  SMTP_PORT: ${SMTP_PORT}
  MATOMO_ENABLED: ${MATOMO_ENABLED}
  MATOMO_SITE_ID: ${MATOMO_SITE_ID}
  MATOMO_DOMAIN: ${MATOMO_DOMAIN}
  MATOMO_SCRIPT_DOMAIN: ${MATOMO_SCRIPT_DOMAIN}
  MATOMO_TOKEN: ${MATOMO_TOKEN}
  CKAN_SYSADMIN_NAME: ${CKAN_SYSADMIN_NAME}
  CKAN_SYSADMIN_PASSWORD: ${CKAN_SYSADMIN_PASSWORD}
  CKAN_SYSADMIN_EMAIL: ${CKAN_SYSADMIN_EMAIL}
  SENTRY_DSN: ${SENTRY_DSN}
  SENTRY_ENV: ${SENTRY_ENV}
  SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE}
  SENTRY_ENV_PROFILES_SAMPLE_RATE: ${SENTRY_ENV_PROFILES_SAMPLE_RATE}
  SENTRY_LOADER_SCRIPT: ${SENTRY_LOADER_SCRIPT}

services:
  postgres:
    build:
      context: ./postgres
    restart: on-failure
    ports:
      - "5432:5432"
    networks:
      - backend
    environment:
      - PGDATA=/var/lib/postgresql/data/db
      - POSTGRES_DB=${DB_CKAN}
      - POSTGRES_USER=${DB_CKAN_USER}
      - POSTGRES_PASSWORD=${DB_CKAN_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_CKAN_USER}"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s

  redis:
    image: redis:${REDIS_IMAGE_TAG}
    restart: on-failure
    expose:
      - 6379
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s

  solr:
    image: ${REGISTRY}/${REPOSITORY}/solr:${SOLR_IMAGE_TAG}
    restart: always
    expose:
      - 8983
    networks:
      - backend
    volumes:
      - solr_data:/var/solr/data/ckan/data
    healthcheck:
      test: ["CMD-SHELL", "curl --fail -s http://localhost:8983/solr/ckan/admin/ping?wt=json | grep -o 'OK'"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s

  ckan:
    image: ${REGISTRY}/${REPOSITORY}/ckan:${CKAN_IMAGE_TAG}
    restart: always
    networks:
      - frontend
      - backend
    depends_on:
      - postgres
      - redis
      - solr
    expose:
      - 5000
    env_file:
      - ./.env.ckan.local
    environment:
      <<: *env-ckan
    volumes:
      - ckan_data:/srv/app/data
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000/api/3/action/status_show --user-agent 'docker-healthcheck' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 300s

  ckan_cron:
    image: ${REGISTRY}/${REPOSITORY}/ckan:${CKAN_IMAGE_TAG}
    restart: always
    entrypoint: /srv/app/scripts/entrypoint_cron.sh
    user: root
    networks:
      - frontend
      - backend
    depends_on:
      - ckan
    env_file:
      - ./.env.ckan.local
    environment:
      <<: *env-ckan
    volumes:
      - ckan_data:/srv/app/data
    healthcheck:
      test: ["CMD-SHELL", "ps -aux | grep -o '[c]ron -f' && ps -aux | grep -o '[s]upervisord --configuration'"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

  nginx:
    image: ${REGISTRY}/${REPOSITORY}/nginx:${NGINX_IMAGE_TAG}
    restart: always
    networks:
      - frontend
    depends_on:
      - ckan
    ports:
      - "80:80"
    env_file:
      - ./.env.nginx.local
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - SECONDARY_DOMAIN_NAME=${SECONDARY_DOMAIN_NAME}
      - NAMESERVER=${NAMESERVER}
      - CKAN_HOST=${CKAN_HOST}
      - CKAN_PORT=${CKAN_PORT}

  mailhog:
    image: mailhog/mailhog:latest
    restart: on-failure
    networks:
      - frontend
      - backend
    expose:
      - 1025
    ports:
      - "8025:8025"
    environment:
      - MH_HOSTNAME=${SMTP_HOST}
      - MH_STORAGE=memory
      - MH_AUTH_FILE=/mailhog/auth
    volumes:
      - ./.mh-auth:/mailhog/auth

volumes:
  postgres_data:
  solr_data:
  ckan_data:

networks:
  frontend:
    driver: bridge
  backend:
